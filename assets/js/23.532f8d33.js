(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{177:function(t,s,n){"use strict";n.r(s);var a=n(0),o=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"configuration-cheat-sheet"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuration-cheat-sheet","aria-hidden":"true"}},[t._v("#")]),t._v(" Configuration Cheat Sheet")]),t._v(" "),n("p",[t._v("The following typescript file contains all currently supported settings together with extensive comments on their meaning. For further information on most of these configuration options, please read the guide on "),n("a",{attrs:{href:"/creating-argument-maps"}},[t._v("creating argument maps")]),t._v(".")]),t._v(" "),n("p",[t._v("All settings are optional (signified by the ? behind their names).")]),t._v(" "),n("div",{staticClass:"language-typescript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-typescript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("IArgdownConfig")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n   * The files that should be loaded\n   * You can use a file glob.\n   **/")]),t._v("\n  inputPath"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n   * Use this if you want to directly set a folder and a file name for an exported file.\n   * \n   * Do not use this if you want the naming to be done dynamically. \n   **/")]),t._v("\n  outputPath"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n   * Will be appended to the file name of any files exported. \n   **/")]),t._v("\n  outputSuffix"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// settings for the data plugin")]),t._v("\n  data"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v('/**\n     * If set to "ignore", any settings in the frontmatter will be ignored.\n     * If set to "default" or undefined the front matter yaml data settings are merged as default settings into the request object.\n     * If set to "priority" the yaml data settings overwrite any external settings.\n     * This makes it possible to configure plugins without using an external argdown.config.js file.\n     */')]),t._v("\n    frontMatterSettingsMode"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"default"')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"ignore"')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"priority"')]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * If false the YAML data of arguments, statements and headings is always parsed with the outer curly brackets.\n     * In this case the YAML data has to always be in inline format which looks similar to JSON data.\n     *\n     * If true the data is parsed without the outer curly brackets if the opening bracket is followed by a line break.\n     * This means that the YAML data has to be in block format instead of the JSON-like inline format.\n     */")]),t._v("\n    switchToBlockFormatIfMultiline"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// settings for the model plugin")]),t._v("\n  model"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * if true, tags will be removed from statement and description text\n     **/")]),t._v("\n    removeTagsFromText"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// default: false")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v('/**\n     * Determines how statement-to-statement relations are to be interpreted:\n     * In "loose" mode, - means attack and + means support.\n     * In "strict" mode, - means contrary and + means entails.\n     **/')]),t._v("\n    mode"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"loose"')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"strict"')]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// loose is default mode")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * If true, outgoing relations of reconstructed arguments are transformed into outgoing relations of the pcs's main conclusion.\n     * Incoming undercuts of reconstructed arguments are transformed into incoming undercuts of the pcs's last inference.\n     **/")]),t._v("\n    transformArgumentRelations"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// default is true")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// settings for the tag plugin")]),t._v("\n  color"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * A custom color scheme or the name of a built-in one\n     * \n     * colors have to be in #fffff hex format\n     * \n     * The color at index 0 will be used as default color.\n     *\n     */")]),t._v("\n    colorScheme"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v('// default is "default"')]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * A custom color scheme for groups\n     **/")]),t._v("\n    groupColorScheme"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    colorByTags"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// default is true")]),t._v("\n    colorGroupsByTags"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// default is false")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v('/**\n     * Mapping of tags to colors. \n     * \n     * You can refer to a color scheme by index.\n     * \n     * You can give tags priorities to use them for coloring even if they are not the first tags \n     * applied.\n     * \n     * Example: {"tag-1": 1, "tag-2": "#CCCCCC", "tag-3": {color: 0, priority: 2}}\n     */')]),t._v("\n    tagColors"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tagName"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("color"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" priority"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Ignore color fields of data elements.\n     **/")]),t._v("\n    ignoreColorData"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// default is false")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v('/**\n     * A map from statement titles to colors\n     * \n     * Example: {"S1": 1, "S2": "#CCCCCC"}\n     **/')]),t._v("\n    statementColors"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("title"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v('/**\n     * A map from argument titles to colors\n     * \n     * Example: {"A1": 1, "A2": "#CCCCCC"}\n    **/')]),t._v("\n    argumentColors"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("title"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v('/**\n     * A map from section titles to colors\n     * \n     * Example: {"Heading 1": 1, "Heading 2": "#CCCCCC"}\n     **/')]),t._v("\n    groupColors"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("title"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// settings for the selection plugins")]),t._v("\n  selection"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Can be used to only select arguments and statements with certain tags\n     */")]),t._v("\n    selectedTags"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Should arguments and statements without tags be excluded from the selection?\n     * This is only relevant, if [[ISelectionSettings.selectedTags]] is used.\n     */")]),t._v("\n    selectElementsWithoutTag"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     *\n     * A list of headings that can be used to only selected arguments and statements from certain sections in the texts.\n     */")]),t._v("\n    selectedSections"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Should arguments and statements that are defined under no heading be excluded from the selection?\n     * This is only relevant if [[ISelectionSettings.selectedSections]] is used.\n     */")]),t._v("\n    selectElementsWithoutSection"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Titles of statements that should be represented as nodes in the map.\n     *\n     * This does not automatically exclude all other statements from being put into the map as nodes.\n     * It works similarly to using the isInMap:true flag for the included statements.\n     * Which other statements are selected depends on the other selection methods used.\n     */")]),t._v("\n    includeStatements"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Titles of statements that should be excluded from the map.\n     */")]),t._v("\n    excludeStatements"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Titles of arguments that should not be in the map.\n     */")]),t._v("\n    excludeArguments"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * If true, the isInMap data flag is ignored.\n     */")]),t._v("\n    ignoreIsInMap"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Should disconnected nodes be excluded from the map?\n     **/")]),t._v("\n    excludeDisconnected"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// default is true")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * The method by which preselected statements are selected\n     *\n     **/")]),t._v("\n    statementSelectionMode"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"all"')]),t._v("\n      "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"with-title"')]),t._v("\n      "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"with-relations"')]),t._v("\n      "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"with-more-than-one-relation"')]),t._v("\n      "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"not-used-in-argument"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v('// default: "with-title"')]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  map"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    statementLabelMode"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"hide-untitled"')]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"title"')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"text"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v('// default is "hide-untitled"')]),t._v("\n    argumentLabelMode"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"hide-untitled"')]),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"title"')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"text"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v('// default is "hide-untitled"')]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  group"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * How many levels of groups should there be? \n     **/")]),t._v("\n    groupDepth"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Can be used to override heading-based grouping.\n     **/")]),t._v("\n    regroup"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("title"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tags"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" statements"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arguments"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" children"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  html"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    outputDir"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v('// default is "./html"')]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Remove sourrounding html and body tags, remove head section of HTML.\n     *\n     * Instead a simple div containing the argdown HTML is returned.\n     */")]),t._v("\n    headless"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * External CSS file to include in the HTML head section.\n     */")]),t._v("\n    cssFile"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/** Title of the HTML document. If not provided, the first top-level heading will be used. */")]),t._v("\n    title"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    lang"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    charset"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    allowFileProtocol"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/** Optional setting to specify a custom head section. */")]),t._v("\n    head"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/** Function to test if a link is valid. */")]),t._v("\n    validateLink"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" allowFile"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/** Function to normalize links. */")]),t._v("\n    normalizeLink"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    css"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  json"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    outputDir"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v('// default is "./json"')]),t._v("\n    spaces"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Should [[Argument.relations]], [[Statement.relations]] be removed from the JSON objects?\n     */")]),t._v("\n    removeEmbeddedRelations"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Should the JSON data include the response.map property?\n     */")]),t._v("\n    exportMap"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Should the JSON data include sections?\n     */")]),t._v("\n    exportSections"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Should the JSON data include tag data?\n     */")]),t._v("\n    exportTags"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * Should the JSON data include metaData?\n     */")]),t._v("\n    exportData"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  dot"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    outputDir"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v('// default is "./dot"')]),t._v("\n    graphname"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    lineLength"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("number")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v('/**\n     * Any settings strings that are allowed in a dot file.\n     * The settings will be inserted in the following form: \'key: "value";\'\n     * \n     * Example: {rankdir: "BT"}\n     */')]),t._v("\n    graphVizSettings"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  dotToSvg"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    outputDir"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v('// default is "./svg"')]),t._v("\n    removeProlog"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  pdf"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    outputDir"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v('// default is "./pdf"')]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n   * If an array is used: the processors that should be executed in order by the [[ArgdownApplication]]\n   * during the current run.\n   *\n   * If a string is used: the name of the process to be found in [[IArgdownRequest.processes]] \n   * or a built-in process.\n   */")]),t._v("\n  process"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n   * A dictionary of processes that can be run.\n   *\n   * Keys are the process names, values are list of IArgdownConfig-like objects.\n   * \n   * There are only two differences to normal IArgdownConfig objects:\n   * - the processes can not itself contain a processes field.\n   * - the process field of the process has to be a name of a built-in-process or an array of processors to be run.\n   */")]),t._v("\n  processes"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" IArgdownConfig "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n   * Custom plugins that will be added before running the current process.\n   * They will be removed again afterwards. \n   **/")]),t._v("\n  plugins"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("plugin"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" IArgdownPlugin"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" processor"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token builtin"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v('/**\n   * Log level for the Argdown logger\n   *\n   * Set to "verbose" to get lots of information about processors and plugins\n   **/')]),t._v("\n  logLevel"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"error"')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"warning"')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"verbose"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v('// default is "error"')]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n   * Should the application throw exceptions from plugins?\n   */")]),t._v("\n  throwExceptions"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// default is false")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n   * Should exceptions thrown by plugins be logged?\n   */")]),t._v("\n  logExceptions"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("boolean")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// default is true")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n   * You can add a custom logger here\n   **/")]),t._v("\n  logger"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" IArgdownLogger"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}],!1,null,null,null);o.options.__file="configuration-cheatsheet.md";s.default=o.exports}}]);